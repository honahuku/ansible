- hosts: vpnservers
  become: true
  tasks:
    - name: aptのアップデート
      apt:
        upgrade: no
        update_cache: yes

    - name: python3 のインストール確認
      apt:
        name: python3
        state: present
      when: ansible_os_family == "Debian"

    - name: 必要なパッケージをインストール
      apt:
        name:
          - curl
          - grep
          - make
          - dnsmasq
          - gcc
          - libssl-dev
          - libcrypto++-dev
          - libiconv-hook-dev
          - libedit-dev
          - libncurses5-dev
          - zlib1g-dev
          - libpthread-stubs0-dev
        state: present

    - name: SoftEtherの最新版リンクを取得
      shell: >
        URL="https://www.softether-download.com/files/softether/";
        latest_link=$(curl -fsSL $URL | grep -oP '(?<=HREF=")/files/softether/.+?-rtm-.+?(?=")' | sort -Vr | head -n 1);
        echo "https://www.softether-download.com${latest_link}"
      register: version_link
      changed_when: False

    - name: マシンのアーキテクチャを取得
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - hardware

    - name: ダウンロードリンクを生成
      set_fact:
        download_link: >-
          {{ version_link.stdout }}Linux/SoftEther_VPN_Server/{{ '64bit_-_Intel_x64_or_AMD64' if ansible_facts['architecture'] == 'x86_64' else '64bit_-_ARM_64bit' }}/softether-vpnserver-{{ version_link.stdout.split('/')[-2].split('-tree')[0] }}-linux-{{ 'x64' if ansible_facts['architecture'] == 'x86_64' else 'arm64' }}-64bit.tar.gz

    - name: SoftEtherをダウンロードして解凍
      ansible.builtin.unarchive:
        src: "{{ download_link }}"
        dest: /usr/local/
        remote_src: yes

    - name: SoftEtherをビルド
      command:
        cmd: make
        chdir: /usr/local/vpnserver

    - name: vpnserverのパーミッションを設定
      ansible.builtin.file:
        path: /usr/local/vpnserver/
        state: directory
        mode: 600
        recurse: yes

    - name: vpncmdのパーミッションを設定
      ansible.builtin.file:
        path: /usr/local/vpnserver/vpncmd
        state: file
        mode: 700

    - name: vpnserverのパーミッションを設定
      ansible.builtin.file:
        path: /usr/local/vpnserver/vpnserver
        state: file
        mode: 700

    - name: SoftEtherを起動
      command: /usr/local/vpnserver/vpnserver start

    - name: ansibleで使う設定ファイルをコピー
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/usr/local/vpnserver/{{ item }}"
        owner: "{{ ansible_user }}"
        mode: 664
        decrypt: yes
      loop:
        - secret.txt
        - group.csv
        - policy.csv
        - user.csv
        - disable_ddnsclient.py

    - name: secretをbashの変数に格納
      shell: |
        source /usr/local/vpnserver/secret.txt
        echo "srv_pass=${srv_pass} hub_pass=${hub_pass}"
      register: secrets
      args:
        executable: /bin/bash

    - name: secretをfactに格納
      set_fact:
        srv_pass: "{{ secrets.stdout.split()[0].split('=')[1] }}"
        hub_pass: "{{ secrets.stdout.split()[1].split('=')[1] }}"

    - name: サーバーパスワードを設定
      shell: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /cmd ServerPasswordSet {{ srv_pass }}"

    - name: デフォルトのHUBを削除
      shell: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /cmd HubDelete DEFAULT"

    - name: Hubの作成とパスワードの設定
      shell: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /cmd HubCreate vpnhub1 /PASSWORD:{{ hub_pass }}"

    - name: ブリッジを作成
      shell: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /cmd BridgeCreate vpnhub1 /DEVICE:soft /TAP:yes"

    - name: ダイナミック DNS 機能を無効にする
      shell: "timeout 5 python3 /usr/local/vpnserver/disable_ddnsclient.py /usr/local/vpnserver/vpn_server.config"

    - name: csvを変数に格納
      community.general.read_csv:
        path: "/usr/local/vpnserver/{{ item }}"
      register: csv_data
      loop:
        - group.csv
        - policy.csv
        - user.csv

    # ファイル名をキーとして取り出したいのでリストのまま使わず辞書に変換する
    - name: csv_dataを辞書型に変換
      set_fact:
        csv_dict: "{{ csv_dict | default({}) | combine({item.item: item.list}) }}"
      loop: "{{ csv_data.results }}"
      # secretであるuser.csvが含まれているので変換後のログを出力しない
      no_log: true

    - name: グループを作成する
      expect:
        command: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /hub:vpnhub1 /cmd GroupCreate {{ item.name }} /REALNAME:{{ item.realname }} /NOTE:{{ item.note }}"
        responses:
          "Password:": "{{ hub_pass }}"
      loop: "{{ csv_dict['group.csv'] }}"
      # secretであるuser.csvが含まれているので変換後のログを出力しない
      no_log: true

    - name: Generalグループにポリシーを設定する
      expect:
        command: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /hub:vpnhub1 /cmd GroupPolicySet General /NAME:{{ item.name }} /VALUE:{{ item.value }}"
        responses:
          "Password:": "{{ hub_pass }}"
      loop: "{{ csv_dict['policy.csv'] }}"

    - name: ユーザーを作成する
      expect:
        command: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /hub:vpnhub1 /cmd UserCreate {{ item.user }} /GROUP:{{ item.group }} /REALNAME:{{ item.realname }} /NOTE:{{ item.note }}"
        responses:
          "Password:": "{{ hub_pass }}"
      loop: "{{ csv_dict['user.csv'] }}"
      # secretであるuser.csvが含まれているので変換後のログを出力しない
      no_log: true

    - name: ユーザーのパスワードを設定する
      expect:
        command: "timeout 5 /usr/local/vpnserver/vpncmd /server localhost /password:{{ srv_pass }} /hub:vpnhub1 /cmd UserPasswordSet {{ item.user }} /password:{{ item.password }}"
        responses:
          "Password:": "{{ hub_pass }}"
      loop: "{{ csv_dict['user.csv'] }}"
      # secretであるuser.csvが含まれているので変換後のログを出力しない
      no_log: true

    - name: ansibleで使った設定ファイルを削除
      ansible.builtin.file:
        path: "/usr/local/vpnserver/{{ item }}"
        state: absent
      loop:
        - secret.txt
        - group.csv
        - policy.csv
        - user.csv
        - disable_ddnsclient.py

    - name: NICの状態を取得する
      setup:
        gather_subset: network
      register: network_facts

    - name: デフォルトゲートウェイとNIC名を設定
      set_fact:
        default_route_ip: "{{ network_facts.ansible_facts.ansible_default_ipv4.address }}"
        default_interface: "{{ network_facts.ansible_facts.ansible_default_ipv4.interface }}"

    - name: softether-iptables.shをSoftEtherのディレクトリに配置
      template:
        src: softether-iptables.sh.j2
        dest: /usr/local/vpnserver/softether-iptables.sh
        mode: 700

    - name: dnsmasq.confをコピー
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        backup: yes

    - name: sysctlのパラメータを設定
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
      register: result
      until: result is succeeded
      retries: 3
      delay: 5
      loop:
        - { name: "net.core.somaxconn", value: "4096" }
        - { name: "net.ipv4.ip_forward", value: "1" }
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.accept_redirects", value: "1" }
        - { name: "net.ipv4.conf.all.rp_filter", value: "1" }
        - { name: "net.ipv4.conf.default.send_redirects", value: "1" }
        - { name: "net.ipv4.conf.default.proxy_arp", value: "0" }

    - name: SoftEtherをsystemdに登録
      copy:
        src: vpnserver.service
        dest: /lib/systemd/system

    - name: サービスを有効化
      ansible.builtin.systemd:
        state: started
        name: vpnserver
        daemon_reload: true
        enabled: true
      register: result
      until: result is succeeded
      retries: 3
      delay: 10
